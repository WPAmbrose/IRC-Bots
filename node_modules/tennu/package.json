{
  "name": "tennu",
  "version": "0.9.0",
  "description": "Tennu - Modular IRC Bot Framework for Node.js",
  "maintainers": [
    {
      "name": "Ryan Scheel",
      "email": "ryan.havvy@gmail.com",
      "url": "havvy"
    }
  ],
  "contributors": [
    {
      "name": "Ryan Scheel",
      "email": "ryan.havvy@gmail.com",
      "url": "havvy"
    },
    {
      "name": "Marc Talbot",
      "url": "metalbot"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/Tennu/tennu.git"
  },
  "homepage": "https://tennu.github.io/",
  "main": "lib/index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "keywords": [
    "irc",
    "bot",
    "tennu",
    "irc-bot",
    "framework",
    "event-driven"
  ],
  "dependencies": {
    "simplesets": "1.2.x",
    "lodash": "2.4.x",
    "irc-socket": "~2.2.0",
    "irc-message": "1.0.x",
    "tennu-plugins": "~3.0.0",
    "commander": "~2.1.x",
    "q": "~0.9.x",
    "after-events": "~1.0.0",
    "bluebird": "~1.0.0"
  },
  "devDependencies": {
    "sinon": "~1.7.3",
    "deep-eql": "~0.1.3",
    "better-assert": "~1.0.0",
    "sweet-bdd": "~1.0.0",
    "fez": "git://github.com/fez/fez",
    "fez-sweet.js": "~0.6.0",
    "coco-js": "git://github.com/Havvy/coco-js",
    "mocha": "~1.17.0",
    "sparkler": "~0.1.6"
  },
  "scripts": {
    "test": "mocha -R spec",
    "build": "./fez.js"
  },
  "bin": {
    "tennu": "bin/cli.js"
  },
  "license": "ISC",
  "readme": "[![Build Status](https://travis-ci.org/Tennu/tennu.png?branch=master)](https://travis-ci.org/Tennu/tennu)\n\nTennu is an IRC bot framework written in Node.js\n\n[![NPM](https://nodei.co/npm/tennu.png?downloads=true&stars=true)](https://nodei.co/npm/tennu/)\n\nNote: Modules are going to be renamed to plugins. The only breaking change in code is that the config\nproperty will be changed and you'll have to move your private plugins from tennu_plugins to tennu_plugins.\nThe code for now will say 'plugins', while the documentation says 'plugins'. They are synonomous.\n\n----------\n\n## Basic Usage ##\n\nWith Tennu, you create an irc client, require your plugins or subscribe to your event listeners, and then connect.\n\n```javascript\nvar tennu = require('tennu');\nvar network = require('../config/myNetwork.json'); // See next section\nvar myClient = tennu.Client(network);\nmyClient.connect();\n```\n\nBefore connecting, add listeners to events from irc & users, or load plugins.\n\n```javascript\n\n// Do something when a nick, perhaps yourself, joins a channel\nmyClient.on('join', function (message) {\n    this.say(message.channel, message.actor + \" joined!\");\n});\n\n// Do something when a user emits a command, in this case, join the specified channel.\nmyClient.on('!join', function (command) {\n    this.join(command.args[0]);\n});\n\n// Load a plugin.\nmyClient.initialize(require('./yourModule'));\n\n// Or just use a plugin from tennu_plugins/%f or node_plugins/tennu-%f\nmyClient.use(['admin', 'last-seen']);\n\nmyClient.connect();\n```\n\n----------\n\n## Configuration ##\n\nA network configuration object has the following properties:\n\n* server          - IRC server to connect to. _Example:_ _irc.mibbit.net_\n* port            - Port to connect to. Defaults to 6667.\n* secure          - Use a TLS socket (Throws away the NetSocket)\n* ipv6            - Whether you are connecting over ipv6 or not.\n* localAddress    - See net.Socket documentation. ;)\n* capab           - IRC3 CAP support. (Untested)\n* password        - Password for IRC Network (most networks do not have a password)\n* nickname        - Nickname the bot will use. Defaults to \"tennubot\"\n* username        - Username the bot will use. Defaults to \"user\"\n* realname        - Realname for the bot. Defaults to \"tennu v0.3\"\n* auth-password   - Password for identifying to services.\n* nickserv        - Nickname of nickserv service. Defaults to \"nickserv\".\n* command-trigger - Command character to trigger commands with. By default, '!'.\n* channels        - Array of channels to autojoin. _Example:_ [\"#help\", \"#tennu\"]\n* plugins         - An array of plugin names that the bot requires.\n* disable-help    - Disables the built-in help plugin.\n\nOther plugins may add additional properties.\n\nConfiguration objects are JSON encodable.\n\n## Dependency Management ##\n\nThe second (optional) parameter to tennu.Client is an object of factories to\nreplace the factories that the Client uses by default.\n\n* NetSocket\n* IrcSocket\n* MessageHandler\n* CommandHandler\n* Plugins\n* BiSubscriber\n* Logger\n\nThese functions will always be called as constructors (with `new`).\n\n### Logging ###\n\nOf these, the only one you will probably care about is Logger. The object\nreturned by the Logger function must implement the following methods:\n\n`debug, info, notice, warn, error, crit, alert, emerg`\n\nBase Tennu will only use debug through error, but other plugins and event\nemitters may use crit through emerg.\n\n-------------\n\n## Event Handling ##\n\nNote: Tennu uses a custom event handler. Listeners are placed at the end of the event queue,\ninsead of happening right away. Errors are currently logged to console, but otherwise\nswallowed.\n\n### Respond Functionality ###\n\nCommands and Messages that have a channel property take a return value. Currently, the\nreturn value must be a string or array that is then said to the channel the message\noriginated in.\n\n```javascript\n// Simple echobot.\ntennu.on('privmsg', function (privmsg) {\n    return privmsg.message;\n});\n\n// Equivalent to:\ntennu.on('privmsg', function (privmsg) {\n    tennu.say(privmsg.channel, privmsg.message);\n});\n```\n\n### Subscribing Options ###\n\nSubscribing to events in Tennu is more flexible than most event listeners.\n\nYou register a single handler on multiple events at once by separating the events with a space,\nfor example `.on(\"x y\", fn)` is equivalent to `.on('x', fn); .on('y', fn)`. Furthermore, an object\ncan be passed, where each key is passed as the first parameter and its value, the second.\n\n```javascript\n// Examples\n\non(\"irc_event\", listener)\non(\"!user-command\", listener)\non(\"join quit\", listener)\non({\n    \"part\": part_listener,\n    \"join\": join_listener,\n    \"!hi !bye\": talk_listener\n})\n```\n\nYou can also unsubscribe non-once events with `off`, taking the same parameters as `on`.\n\n### Listener Parameters ###\n\nListeners are passed either a message or command object.\n\n#### Message ####\n\nMessages are passed by irc events.\n\nMessages are immutable, as are their args. Make sure to copy the args array before trying to manipulate it.\n\nAll messages have the following fields:\n\n* receiver   - Receiver of the message. A reference to the Client object.\n* prefix     - The prefix is either a hostmask of the format \"nickname!username@hostname\", or the server you are connected to.\n* command    - Message command type. For example, 'privmsg' or 'nick'.\n* params     - Array of sent parameters.\n* tags       - IRC3 tags sent with message.\n\nSome messages have extended information. See\n[Message Properties](http://tennu.github.io/documentation/api/message-properties).\n\n#### Command ####\n\nCommands are passed for user commands.\n\nCommands are an extension of Messages with the command type of 'privmsg'.\nThey have all properties, plus the following properties:\n\n* args       - Array of words after the command name.\n* command    - The command name.\n\nFor example, a command of \"!do-it ARG1 ARG2\" will have args be [\"ARG1\", \"ARG2\"] and command be 'do-it'.\n\n--------\n\n## Actions ##\n\nAll of the following are methods on Tennu that can be used once connected.\n\nThese methods are also available on the client's 'out' property.\nIn Tennu 0.9.0, the 'out' property will go away, and the 'actions' plugin\nwill export these methods.\n\n### say(channel, message) ###\n\n* channel is either a channel (\"#chan\") or a user (\"nick\").\n* message is either a string or array of strings. Given an array, say each\nindividual element on its own line.\n\nHas the bot say the message(s) to the specific channel/user.\n\n```javascript\n/* Output (IRC)\n(botnick) This is a message!\n*/\ntennu.say('#example', \"This is a message!\");\n\n/* Output (IRC)\n(botnick) Hi there.\n(botnick) Bye there.\n*/\ntennu.say('#example', [\"Hi there.\", \"Bye there.\"]);\n```\n\n### act(channel, message) ###\n\nAs per say, but as an action (/me)\n\n```javascript\n/* Output (IRC)\nbotnick does something!\n*/\ntennu.act('#example', \"does something!\");\n```\n\n### ctcp(channel, type, message) ###\n\n```javascript\ntennu.ctcp('havvy', 'ping', 'PINGMESSAGE');\n```\n\n### nick(newNick) ###\n\nChange the bots nickname.\n\n### join(channel) ###\n\nJoins the specified channel.\n\n```javascript\ntennu.join(\"#tennu\");\ntennu.join(\"#keyed-channel channel-key\");\ntennu.join(\"#chan1,#chan2\");\ntennu.join(\"0\"); // Part all channels.\n```\n\n### part(channel, reason) ###\n\nParts the specified channel with the given reason.\n\n### quit(reason) ###\n\nQuits the server with the given reason.\n\n### whois(users, server) ###\n\nServer is optional, and you'll probably not need it. Look at RFC 1459 for\nwhat benefit it gives you.\n\nusers is either a string or an array of strings.\n\n### userhost(users) ###\n\nRetrieves the userhost of the user(s).\n\n### raw(message) ###\n\nFor actions that are lacking a command, you can use raw to perform them.\nYou must either pass an array of arguments (and the multiword argument must\nbe in a single index without the colon) or pass the full string.\n\nIf you find yourself using raw(), please file an issue.\n\n### rawf(format, args...) ###\n\n[0.7.1]\n\nAs raw(message), but the arguments are passed through util.format() first.\n\n--------\n\n## Plugin System ##\n\nTennu has its own plugin system.\nYou can read about it at https://github.com/havvy/tennu-plugins/.\n\nYou may access the plugin system's methods via the Client.plugins property\nor by using one of the following methods:\n\n* client.require()\n* client.getModule()\n* client.getRole()\n* client.use()\n* client.initializePlugin()\n* client.isPluginInitializable()\n\n### Creating Your Own Plugins ###\n\nSee [Creating Your Own Plugins](https://github.com/Havvy/tennu/blob/master/doc/creating-plugins.md).\n\nSee [Getting Started](http://tennu.github.io/documentation/getting-started).\n\n### Built-In Modules ###\n\nOnly the help plugin is currently fully implemented.\n\n#### help ####\n\n[0.6.0+]\n\nSets the command `!help`.\n\nSee [Help Module Documentation](https://tennu.github.io/plugins/help).\n\n[0.8.2+]\n\nIf you don't want this functionality, set `disable-help` to `true` in your configuration object.\n\n#### channels ####\n\nUnimplemented.\n\n#### users ####\n\n[0.7.3+]\n\nThis plugin has a single method exported: isIdentifedAs(nickname, nickname_identified, callback)\n\nSee [User Module Documentation](https://tennu.github.io/plugins/user).\n\n#### server ####\n\n[0.9.x+]\n\nInformation about the server. For now, the only thing this plugin offers is a\ncapabilities map listing the information from the 005 raw numeric.\n\nSee [Server Plugin Documentation](https://tennu.github.io/plugins/server).\n\n```javascript\n\nvar server = tennu.use(\"server\");\nconsole.log(util.inspect(server.capabilities));\n```\n\n## Command Line Utility\n\nInstall Tennu globally, and you'll gain access to the `tennu` command line tool.\n\n```bash\n> pwd\n/home/you/your-tennubot\n> ls\nnode_plugins/ tennu_plugins/ config.json\n> tennu config.json\n```\n\nThe tennu command takes two optional argument, -v (--verbose) and -d (--debug),\nfor adding a Logger that logs to the console (info level and above without -d).\n\nYou can also use the tennu command inside your npm scripts when Tennu is installed\nlocally, and if you are distributing the bot, this is a better option.\n\n## Contributing ##\n\n### Tests ###\n\n```\nnpm test\n```\n\nBetween all projects (tennu, tennu-plugins, irc-socket, after-events),\nthere are over 100 tests, but more are always appreciated, especially\nif they are failing with an actual bug. ;)\n\n### Building Files ###\n\nTennu is written using the Sweet.js dialect of JavaScript. If you've never\nused it, it is just JavaScript with macros.\n\nTo turn the sweet.js files into javascript files, run `fez.js`.\n\nPlace sweet.js files in either `src/` or `test-src/`.\n\n## See Also ##\n\n* [Tennu's Website](https://tennu.github.io/)\n* [IRC Specifications and other helpful tables](https://www.alien.net.au/irc/)\n* [IRC Wiki](http://www.irc-wiki.org/)\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/Tennu/tennu/issues"
  },
  "_id": "tennu@0.9.0",
  "_from": "tennu@0.9.0"
}
