{"version":3,"sources":["/home/havvy/tennu/tennu/src/lib/command-handler.sjs"],"names":["EventEmitter","require","inspect","format","lodash","Response","Promise","badResponseFormat","Command","privmsg","command_text","args","split","commandname","shift","toLowerCase","create","command","startsWith","str","prefix","substring","length","CommandParser","config","client","nickname","logger","trigger","getMaybeCommandString","removeTrigger","string","message","isQuery","indexOf","trim","parser","Object","parse","maybeCommand","notice","emit","after","err","res","type","error","stack","channel","undefined","resolve","then","a","send","catch","logBadResponseError","err$2","module","exports"],"mappings":"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","file":"command-handler.js","sourcesContent":["const EventEmitter = require('after-events');\nconst inspect = require('util').inspect;\nconst format = require('util').format;\nconst lodash = require('lodash');\nconst Response = require('./response');\nconst Promise = require('bluebird');\n\nconst badResponseFormat = 'Command handler for %s returned with invalid value: %s';\n\nfunction Command (privmsg, command_text) {\n    const args = command_text.split(/ +/);\n    const commandname = args.shift().toLowerCase();\n\n    return lodash.create(privmsg, {\n        args: args,\n        command: commandname\n    });\n}\n\nfunction startsWith(str, prefix) {\n    return str.substring(0, prefix.length) === prefix;\n}\n\n// nickname is a function that returns the nickname of the client.\nfunction CommandParser (config, client, nickname, logger) {\n    var trigger = config['command-trigger'] || '!';\n\n    function getMaybeCommandString (privmsg) {\n        function removeTrigger (string) {\n            return string.substring(trigger.length);\n        }\n\n        if (startsWith(privmsg.message, trigger)) {\n            return removeTrigger(privmsg.message);\n        }\n\n        if (privmsg.isQuery) {\n            return privmsg.message;\n        }\n\n        if (startsWith(privmsg.message.toLowerCase(), nickname().toLowerCase())) {\n            // Trimming in case of multiple spaces. e.g. (raw message)\n            // nick!user@host PRIVMSG #chan botname:   do something\n            const message = privmsg.message.substring(privmsg.message.indexOf(' ') + 1).trim();\n            return startsWith(message, trigger) ? removeTrigger(message) : message;\n        }\n\n        return false;\n    };\n\n    const parser = Object.create(EventEmitter());\n\n    parser.parse = function (privmsg) {\n        const maybeCommand = getMaybeCommandString(privmsg);\n\n        if (maybeCommand) {\n            const command = Command(privmsg, maybeCommand);\n            logger.notice('Command Handler', 'Emitting command:', command.command);\n\n\n            this.emit(command.command, command);\n            return command;\n        }\n    };\n\n    parser.after(function (err, res, type, command) {\n        // Intent := \"say\" | \"act\" | \"ctcp\" | \"notice\" | \"none\"\n        // Target: NickName | ChannelName\n        // ReturnResponse := {message: String | [CtcpType, CtcpBody], intent: Intent, target: Target, query: Boolean}\n        // Result = undefined | string | [string] | ReturnResponse\n\n        // err := Error\n        // res := Result | Promise<Result>\n        // type := string\n        // command := Command\n\n        if (err) {\n            logger.error('CommandHandler', 'Error thrown in message handler!');\n            logger.error('CommandHandler', err.stack);\n            return;\n        }\n\n        if (command.channel !== undefined) {\n            Promise.resolve(res)\n            .then(λ[Response.create(#, command)])\n            .then(λ[Response.send(#, client)])\n            .catch(logBadResponseError)\n        }\n\n        function logBadResponseError (err) {\n            logger.error('CommandHandler', format(badResponseFormat, command.message, inspect(res)));\n        }\n    });\n\n    return parser;\n};\n\nmodule.exports = CommandParser;"],"sourceRoot":"/source/"}