{"version":3,"sources":["/home/havvy/tennu/tennu/src/lib/message.sjs"],"names":["RFCMessage","require","mircColors","util","extensions","join","message","channel","params","toLowerCase","part","reason","kick","kicked","kicker","quit","privmsg","isQuery","indexOf","trim","replace","nickname","notice","nick","old","hostmask","new","mode","modestring","modes","args","slice","split","prefixes","argModes","i","set_mode","length","push","parameter","shift","set","replyname","username","hostname","realname","server","serverInfo","seconds","since","identifiedas","topic","who","timestamp","nicknames","words","ip","command","Message","raw","Object","create","parseHostmaskFromPrefix","module","exports"],"mappings":"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","file":"message.js","sourcesContent":["var RFCMessage = require(\"irc-message\");\nvar mircColors = /\\u0003\\d?\\d?,?\\d?\\d?/g;\nvar util = require(\"util\");\n\nvar extensions = {\n    join: function (message) {\n        message.channel = message.params[0].toLowerCase();\n    },\n\n    part: function (message) {\n        message.channel = message.params[0].toLowerCase();\n        message.reason = message.params[1];\n    },\n\n    kick: function (message) {\n        message.channel = message.params[0].toLowerCase();\n        message.kicked = message.params[1];\n        message.kicker = message.params[2];\n    },\n\n    quit: function (message) {\n        message.reason = message.params[0];\n    },\n\n    privmsg: function (message) {\n        // Test fails if new channel prefixes are created by IRCds, but that's unlikely.\n        message.isQuery = (\"#!+.~\".indexOf(message.params[0][0]) === -1);\n        message.message = message.params[1].trim().replace(mircColors, \"\");\n\n        if (message.isQuery) {\n            message.channel = message.nickname;\n        } else {\n            message.channel = message.params[0];\n        }\n    },\n\n    notice: function (message) {\n        // Test fails if new channel prefixes are created by IRCds, but that's unlikely.\n        message.isQuery = (\"#!+.~\".indexOf(message.params[0][0]) === -1);\n        message.message = message.params[1].replace(mircColors, \"\").trim();\n\n        if (message.isQuery) {\n            message.channel = message.nickname;\n        } else {\n            message.channel = message.params[0];\n        }\n    },\n\n    nick: function (message) {\n        message.old = message.hostmask.nickname;\n        message.new = message.params[0];\n    },\n\n    mode: function (message) {\n        message.channel = message.params[0]; // Channel or nick\n        message.modestring = message.params[1]; // +asd-asdaf\n        // The IRCd should only send the modestring with the argument modes last.\n        // i.e \"+soh nick nick\" or \"+s-zh+o nick nick\" or \"+pzh-o nick nick\"\n        message.modes = [];\n        var args = message.params.slice(2);\n        var modes = message.modestring.split(\"\");\n        var prefixes = {\"+\":true,\"-\":false};\n        var argModes = { // TODO: Use the \"CHANMODES\" sent by the server on connect to make this dict\n            \"a\": \"nick\",\n            \"b\": \"mask\",\n            \"e\": \"mask\",\n            \"f\": \"lines:second\",\n            \"h\": \"nick\",\n            \"I\": \"mask\",\n            \"J\": \"joins:second\",\n            \"k\": \"key\",\n            \"l\": \"max_users\",\n            \"L\": \"channel\",\n            \"o\": \"nick\",\n            \"O\": \"nick\",\n            \"q\": \"nick\",\n            \"v\": \"nick\"\n        };\n        for (var i = 0, set_mode = true; i < modes.length; i++) {\n            var mode = modes[i];\n            if (mode in prefixes) {\n                set_mode = prefixes[mode];\n            } else if (mode in argModes) {\n                message.modes.push({\n                    mode: mode,\n                    parameter: args.shift(),\n                    set: set_mode\n                });\n            } else {\n                message.modes.push({\n                    mode: mode,\n                    set: set_mode\n                });\n            }\n        }\n    },\n\n    \"307\": function (message) {\n        // :<server> 307 <me> <nick> :is a registered nick\n        // FIXME: Only accounts for Unrealircd\n        message.replyname = \"RPL_WHOISREGNICK\";\n        message.nickname = message.params[1];\n    },\n\n    \"311\": function (message) {\n        // :<server> 311 <me> <nick> <username> <hostmask> * <realname>\n        message.replyname = \"RPL_WHOISUSER\";\n        message.nickname = message.params[1];\n        message.username = message.params[2];\n        message.hostname = message.params[3];\n        message.realname = message.params[5];\n        message.hostmask = {\n            nickname: message.params[1],\n            username: message.params[2],\n            hostname: message.params[3]\n        };\n    },\n\n    \"312\": function (message) {\n        // :<server> 312 <me> <nick> <server> :<info>\n        message.replyname= \"RPL_WHOISSERVER\";\n        message.nickname = message.params[1];\n        message.server = message.params[2];\n        message.serverInfo = message.params[3];\n    },\n\n    \"317\": function (message) {\n        // :<server> 317 <me> <nick> <seconds> <unixtime> :seconds idle, signon time\n        message.replyname = \"RPL_WHOISIDLE\";\n        message.nickname = message.params[1];\n        message.seconds = message.params[2];\n        message.since = message.params[3];\n    },\n\n    \"318\": function (message) {\n        // :<server> 318 <me> <nick> :End of /WHOIS list.\n        message.replyname = \"RPL_ENDOFWHOIS\";\n        message.nickname = message.params[1];\n    },\n\n    \"319\": function (message) {\n        // :<server> 319 <me> <nickname> :<channels>\n        // channel format:  <power sigil>?<channel sigil><name>\n        message.replyname = \"RPL_WHOISCHANNELS\";\n        message.nickname = message.params[1];\n    },\n\n    \"330\": function (message) {\n        // :<server> 330 <me> <nickname> <ident> :is logged in as\n        // Nonstandard, but used on most IRCds.\n        message.replyname = \"RPL_WHOISLOGGEDIN\";\n        message.nickname = message.params[1];\n        message.identifiedas = message.params[2];\n    },\n\n    \"332\": function (message) {\n        // :<server> 332 <me> <channel> :<topic>\n        message.replyname = \"RPL_TOPIC\";\n        message.channel = message.params[1];\n        message.topic = message.params[2];\n    },\n\n    \"333\": function (message) {\n        // :<server> 333 <me> <channel> <who> <timestamp>\n        message.replyname = \"RPL_TOPICWHOTIME\";\n        message.channel = message.params[1];\n        message.who = message.params[2];\n        message.timestamp = message.params[3];\n    },\n\n    \"353\": function (message) {\n        // :<server> 353 <me> = <channel> :<nicknames>\n        // <nickname> := ModeChar <> NickName\n        // The replyname really doesn\"t have an \"E\" in it.\n        message.replyname = \"RPL_NAMREPLY\";\n        message.channel = message.params[2];\n        message.nicknames = message.params[3].trim().split(\" \");\n    },\n\n    \"366\": function (message) {\n        // :<server> 366 <me> <channel> :End of /NAMES list.\n        message.replyname = \"RPL_ENDOFNAMES\";\n        message.channel = message.params[1];\n    },\n\n    \"378\": function (message) {\n        // :<server> 378 <me> <nickname> :is connecting from <hostmask> <ip>\n        message.replyname = \"RPL_WHOISHOST\";\n        message.nickname = message.params[1];\n        var words = message.params[2].split(\" \");\n        message.hostmask = words[3];\n        message.ip = words[4];\n    },\n\n    \"401\": function (message) {\n        // :<server> 401 <me> <nick> :No such nick/channel\n        message.replyname= \"ERR_NOSUCHNICK\";\n        message.nickname = message.params[1];\n    },\n\n    \"403\": function (message) {\n        // :<server> 403 <me> <channel> :<reason>\n        message.replyname = \"ERR_NOSUCHCHANNEL\";\n        message.channel = message.params[1];\n    },\n\n    \"405\": function (message) {\n        // :<server> 405 <me> <channel> :<reason>\n        message.replyname = \"ERR_TOOMANYCHANNELS\";\n        message.channel = message.params[1];\n    },\n\n    \"437\": function (message) {\n        // :<server> 437 <me> <target> :Nick/channel is temporarily unavailable\n        message.replyname = \"ERR_UNAVAILRESOURCE\";\n\n        // TODO: Determine whether resource is channel or nickname.\n        message.channel = message.params[1];\n        message.nickname = message.params[1];\n    },\n\n    \"461\": function (message) {\n        // :<server> 461 <me> <command> :Not enough parameters\n        message.replyname = \"ERR_NEEDMOREPARAMS\";\n        message.command = message.params[1];\n    },\n\n    \"471\": function (message) {\n        // :server> 471 <me> <channel> :Cannot join channel (+l)\n        message.replyname = \"ERR_CHANNELISFULL\";\n        message.channel = message.params[1];\n    },\n\n    \"473\": function (message) {\n        // :server 473 <me> <channel> :Cannot join channel (+i)\n        message.replyname = \"ERR_INVITEONLYCHAN\";\n        message.channel = message.params[1];\n    },\n\n    \"474\": function (message) {\n        // :<server> 474 <me> <channel> :Cannot join channel (+b)\n        message.replyname = \"ERR_BANNEDFROMCHAN\";\n        message.channel = message.params[1];\n    },\n\n    \"475\": function (message) {\n        // :server> 475 <me> <channel> :reason\n        message.replyname = \"ERR_BADCHANNELKEY\";\n        message.channel = message.params[1];\n    },\n\n    \"477\": function (message) {\n        // :server> 477 <me> <channel> :You need a registered nick to join that channel.\n        message.replyname = \"ERR_NEEDREGGEDNICK\";\n        message.channel = message.params[1];\n    },\n\n    \"489\": function (message) {\n        // :<server> 489 <me> <channel> :Cannot join channel (SSL is required)\n        message.replyname = \"ERR_SECUREONLYCHAN\";\n        message.channel = message.params[1];\n    },\n\n    \"520\": function (message) {\n        // :server 520 <me> :Cannot join channel <channel> (IRCops only)\n        // :server 520 <me> <channel> :<reason>\n        message.replyname = \"ERR_OPERONLY\";\n\n        if (message.params.length === 2) {\n            // UnrealIRCd and it's stupidity.\n            message.channel = message.params[1].split(\" \")[3];\n        } else {\n            message.channel = message.params[1];\n        }\n    },\n\n    \"671\": function (message) {\n        // :<server> 671 <me> <nickname> :is using a secure connection\n        message.replyname = \"RPL_WHOISSECURE\"\n    }\n};\n\nvar Message = function (raw) {\n    var message = Object.create(new RFCMessage(raw));\n\n    message.command = message.command.toLowerCase();\n\n    // message.hostmask is either null or an object with\n    // nickname, username, hostname properties.\n    message.hostmask = message.parseHostmaskFromPrefix();\n    message.nickname = message.hostmask && message.hostmask.nickname;\n\n    if (extensions[message.command]) {\n        extensions[message.command](message);\n    }\n\n    return message;\n};\n\nMessage.extensions = extensions;\n\nmodule.exports = Message;"],"sourceRoot":"/source/"}