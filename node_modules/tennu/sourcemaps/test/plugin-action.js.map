{"version":3,"sources":["/home/havvy/tennu/tennu/src/test/plugin-action.sjs"],"names":["sinon","require","assert","equal","inspect","format","install","debug","logfn","console","log","bind","logger","info","notice","warn","error","channel","nickname","nicknamefn","ActionPlugin","EventEmitter","describe","socket","out","messageHandler","beforeEach","raw","spy","init","_socket","note","on","exports","it","join","calledWithExactly","skip","done","joinmsg","emit","then","say","part","quit","kick"],"mappings":"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","file":"plugin-action.js","sourcesContent":["const sinon = require(\"sinon\");\nconst assert = require(\"better-assert\");\nconst equal = require(\"deep-eql\");\nconst inspect = require(\"util\").inspect;\nconst format = require(\"util\").format;\nrequire(\"source-map-support\").install();\n\nconst debug = false;\nconst logfn = debug ? console.log.bind(console) : function () {};\nconst logger = {debug: logfn, info: logfn, notice: logfn, warn: logfn, error: logfn};\n\nconst channel = \"#test\";\nconst nickname = \"testbot\";\n\nconst nicknamefn = function () { return nickname; };\n\nconst ActionPlugin = require(\"../tennu_plugins/action\");\nconst EventEmitter = require(\"after-events\");\n\ndescribe \"IRC Output Socket:\" {\n    var socket, out, messageHandler;\n\n    beforeEach {\n        logfn(/* newline */);\n        messageHandler = new EventEmitter();\n        socket = { raw: sinon.spy() };\n        out = ActionPlugin.init({\n            _socket: socket,\n            //messageHandler,\n            nickname: nicknamefn,\n            info: logfn,\n            note: logfn,\n            on: function () {} // FIXME\n        }).exports;\n    }\n\n    describe \"Join\" {\n        it \"Sends the command to the server\" {\n            out.join(channel);\n            assert(socket.raw.calledWithExactly(format(\"JOIN :%s\", channel)));\n        }\n\n        it skip \"On Success\" (done) {\n            const joinmsg = {nickname: nickname, channel: channel};\n\n            socket.raw = function () {\n                messageHandler.emit(\"join\", joinmsg);\n            };\n\n            out.join(channel).then(function (join) {\n                assert(join.channel === channel);\n                assert(join.nickname === nickname);\n                done();\n            });\n        }\n    }\n\n    it \"can send private messages\" {\n        out.say(\"#test\", \"Hi\");\n        assert(socket.raw.calledWithExactly(\"PRIVMSG #test :Hi\"));\n    }\n\n    it \"can part without a reason\" {\n        out.part(\"#test\");\n        assert(socket.raw.calledWithExactly(\"PART #test\"));\n    }\n\n    it \"can part with a reason\" {\n        out.part(\"#test\", \"the reason\");\n        assert(socket.raw.calledWithExactly(\"PART #test :the reason\"));\n    }\n\n    it \"can quit without a reason\" {\n        out.quit();\n        assert(socket.raw.calledWithExactly(\"QUIT\"));\n    }\n\n    it \"can quit with a reason\" {\n        out.quit(\"the reason\");\n        assert(socket.raw.calledWithExactly(\"QUIT :the reason\"));\n    }\n\n    describe \"Kick\" {\n        it \"with a reason\" {\n            out.kick(\"#test\", \"user\", \"naughty naughty\");\n            assert(socket.raw.calledWithExactly(\"KICK #test user :naughty naughty\"));\n        }\n\n        it \"without a reason\" {\n            out.kick(\"#test\", \"user\");\n            assert(socket.raw.calledWithExactly(\"KICK #test user\"));\n        }\n    }\n}"],"sourceRoot":"/source/"}